<Activity mc:Ignorable="sap sap2010" x:Class="Test" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:l="clr-namespace:LIB_GraphAPI;assembly=LIB_GraphAPI" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:s="clr-namespace:System;assembly=System.Private.CoreLib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=System.Private.CoreLib" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_strTenantID" Type="InArgument(x:String)" />
    <x:Property Name="in_strApplicationID" Type="InArgument(x:String)" />
    <x:Property Name="in_strApplicationSecretName" Type="InArgument(x:String)" />
    <x:Property Name="in_strSharePtURL" Type="InArgument(x:String)" />
    <x:Property Name="in_strSharepointParentFolder" Type="InArgument(x:String)" />
    <x:Property Name="in_Config" Type="InArgument(scg:Dictionary(x:String, x:Object))" />
    <x:Property Name="in_strOrchestratorFolderPath" Type="InArgument(x:String)" />
  </x:Members>
  <VisualBasic.Settings>
    <x:Null />
  </VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>1100,827</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>Test_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>GlobalVariablesNamespace</x:String>
      <x:String>GlobalConstantsNamespace</x:String>
      <x:String>LIB_O365_Sharepoint_00_00</x:String>
      <x:String>System.Security</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>UiPath.MicrosoftOffice365.Enums</x:String>
      <x:String>UiPath.MicrosoftOffice365.Activities.Mail</x:String>
      <x:String>UiPath.MicrosoftOffice365.Models</x:String>
      <x:String>UiPath.Shared.Services.Graph.Mail.Models</x:String>
      <x:String>System.Activities.Runtime.Collections</x:String>
      <x:String>UiPath.MicrosoftOffice365.Activities</x:String>
      <x:String>UiPath.Shared.Activities</x:String>
      <x:String>UiPath.Shared.Activities.ConnectionService.Contracts</x:String>
      <x:String>UiPath.MicrosoftOffice365.Activities.Mail.Enums</x:String>
      <x:String>UiPath.Shared.Activities.Utils</x:String>
      <x:String>UiPath.MicrosoftOffice365.Activities.Mail.Filters</x:String>
      <x:String>UiPath.MicrosoftOffice365.Activities.Contracts</x:String>
      <x:String>UiPath.MicrosoftOffice365.Mail.Enums</x:String>
      <x:String>UiPath.MicrosoftOffice365.Activities.Filters</x:String>
      <x:String>Microsoft.Graph</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>UiPath.MicrosoftOffice365.Activities.Files.Contracts</x:String>
      <x:String>UiPath.MicrosoftOffice365.Activities.Files</x:String>
      <x:String>UiPath.MicrosoftOffice365.Activities.Files.Enums</x:String>
      <x:String>LIB_GraphAPI</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.Common</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Linq</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Drawing.Primitives</AssemblyReference>
      <AssemblyReference>System.Drawing.Common</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>LIB_O365_Sharepoint_00.00</AssemblyReference>
      <AssemblyReference>System.Security.Permissions</AssemblyReference>
      <AssemblyReference>System.Runtime.InteropServices</AssemblyReference>
      <AssemblyReference>System.Private.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Formatters</AssemblyReference>
      <AssemblyReference>System.Private.DataContractSerialization</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Primitives</AssemblyReference>
      <AssemblyReference>System.Reflection.DispatchProxy</AssemblyReference>
      <AssemblyReference>System.Reflection.TypeExtensions</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>UiPath.MicrosoftOffice365</AssemblyReference>
      <AssemblyReference>UiPath.MicrosoftOffice365.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Testing.Activities</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationCore</AssemblyReference>
      <AssemblyReference>UiPath.Web.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.Graph</AssemblyReference>
      <AssemblyReference>Microsoft.Graph.Core</AssemblyReference>
      <AssemblyReference>System.ComponentModel.EventBasedAsync</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>Microsoft.Win32.Primitives</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Primitives</AssemblyReference>
      <AssemblyReference>System.Private.Xml</AssemblyReference>
      <AssemblyReference>netstandard</AssemblyReference>
      <AssemblyReference>UiPath.Workflow</AssemblyReference>
      <AssemblyReference>System.Memory.Data</AssemblyReference>
      <AssemblyReference>NPOI</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities.Design</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Configuration.ConfigurationManager</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.ViewModels</AssemblyReference>
      <AssemblyReference>System.CodeDom</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic.Forms</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic.Core</AssemblyReference>
      <AssemblyReference>System.Linq.Async</AssemblyReference>
      <AssemblyReference>System.Collections</AssemblyReference>
      <AssemblyReference>LIB_GraphAPI</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:Annotation.AnnotationText="This will checks whether the required folder present or not. If not it will create the folder and upload the file." DisplayName="Sequence Save File Into Sharepoint" sap:VirtualizedContainerService.HintSize="552,702" sap2010:WorkflowViewState.IdRef="Sequence_15">
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <TryCatch DisplayName="Try Catch Save File Into Sharepoint" sap:VirtualizedContainerService.HintSize="490,549" sap2010:WorkflowViewState.IdRef="TryCatch_1">
      <TryCatch.Try>
        <Sequence sap2010:Annotation.AnnotationText="This will checks whether the required folder present or not. If not it will create the folder and upload the file." DisplayName="Save File Into Sharepoint" sap:VirtualizedContainerService.HintSize="472,123" sap2010:WorkflowViewState.IdRef="Sequence_1">
          <Sequence.Variables>
            <Variable x:TypeArguments="x:Boolean" Name="boolFolderExists" />
            <Variable x:TypeArguments="x:Int32" Name="intResultcount" />
            <Variable x:TypeArguments="x:Boolean" Name="boolFolderCreated" />
          </Sequence.Variables>
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
              <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:LogMessage DisplayName="Log Sharepoint Upload Start" sap:VirtualizedContainerService.HintSize="410,52" sap2010:WorkflowViewState.IdRef="LogMessage_3" Level="[UiPath.Core.Activities.LogLevel.Info]" Message="[&quot;Checking the folder existance and uploading the file has started&quot;]">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </ui:LogMessage>
          <l:Files_or_Folders_Exist sap2010:Annotation.AnnotationText="This WIll check Year folder exists or not" DisplayName="Folders Exist Year" sap:VirtualizedContainerService.HintSize="410,94" sap2010:WorkflowViewState.IdRef="Files_or_Folders_Exist_8" in_strApplicationIDAssetName="[in_strApplicationID]" in_strApplicationSecretAssetName="[in_strApplicationSecretName]" in_strOrchestratorFolderPath="[in_strOrchestratorFolderPath]" in_strSharepointFileFolderToSearch="[Now.ToString(&quot;yyyy&quot;)]" in_strSharepointSubfolder="[in_strSharepointParentFolder]" in_strSharepointURL="[in_strSharePtURL]" in_strTenantIDAssetName="[in_strTenantID]" out_boolResultFileFolderFound="[boolFolderExists]" out_intResultCount="[intResultcount]">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </l:Files_or_Folders_Exist>
          <If sap2010:Annotation.AnnotationText="This will create yearly folder if not present." Condition="[not(boolFolderExists)]" DisplayName="Check Year Folder Exists" sap:VirtualizedContainerService.HintSize="410,94" sap2010:WorkflowViewState.IdRef="If_5">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <If.Then>
              <Sequence sap:VirtualizedContainerService.HintSize="376,566" sap2010:WorkflowViewState.IdRef="Sequence_16">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <l:Create_Folder sap2010:Annotation.AnnotationText="This will create yearly folder if not present." DisplayName="Create Folder Year" sap:VirtualizedContainerService.HintSize="334,478" sap2010:WorkflowViewState.IdRef="Create_Folder_12" in_strApplicationIDAssetName="[in_strApplicationID]" in_strApplicationSecretAssetName="[in_strApplicationSecretName]" in_strOrchestratorFolderPath="[in_strOrchestratorFolderPath]" in_strSharepointNewFolderName="[Now.ToString(&quot;yyyy&quot;)]" in_strSharepointParentFolderPath="[in_strSharepointParentFolder]" in_strSharepointURL="[in_strSharePtURL]" in_strTenantIDAssetName="[in_strTenantID]" out_boolFolderCreated="[boolFolderCreated]">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </l:Create_Folder>
              </Sequence>
            </If.Then>
            <If.Else>
              <Sequence sap:VirtualizedContainerService.HintSize="376,229" sap2010:WorkflowViewState.IdRef="Sequence_17">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <ui:LogMessage DisplayName="Log Yearly Folder Exists End" sap:VirtualizedContainerService.HintSize="334,141" sap2010:WorkflowViewState.IdRef="LogMessage_9" Level="[UiPath.Core.Activities.LogLevel.Info]" Message="[&quot;Folder for current Year is present&quot;]">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </ui:LogMessage>
              </Sequence>
            </If.Else>
          </If>
          <l:Files_or_Folders_Exist sap2010:Annotation.AnnotationText="This will checks Monthly folder exists or not." DisplayName="Folders Exist Month" sap:VirtualizedContainerService.HintSize="410,94" sap2010:WorkflowViewState.IdRef="Files_or_Folders_Exist_9" in_strApplicationIDAssetName="[in_strApplicationID]" in_strApplicationSecretAssetName="[in_strApplicationSecretName]" in_strOrchestratorFolderPath="[in_strOrchestratorFolderPath]" in_strSharepointFileFolderToSearch="[Now.ToString(&quot;MMMM&quot;)]" in_strSharepointSubfolder="[in_strSharepointParentFolder+&quot;/&quot;+Now.ToString(&quot;yyyy&quot;)]" in_strSharepointURL="[in_strSharePtURL]" in_strTenantIDAssetName="[in_strTenantID]" out_boolResultFileFolderFound="[boolFolderExists]" out_intResultCount="[intResultcount]">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </l:Files_or_Folders_Exist>
          <If sap2010:Annotation.AnnotationText="This will checks monthly folder and creates if not present." Condition="[not(boolFolderExists)]" DisplayName="Check Month Folder Exists" sap:VirtualizedContainerService.HintSize="410,109" sap2010:WorkflowViewState.IdRef="If_6">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <If.Then>
              <Sequence sap:VirtualizedContainerService.HintSize="376,566" sap2010:WorkflowViewState.IdRef="Sequence_18">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <l:Create_Folder sap2010:Annotation.AnnotationText="This will creates monthly folder" DisplayName="Create Month Folder" sap:VirtualizedContainerService.HintSize="334,478" sap2010:WorkflowViewState.IdRef="Create_Folder_13" in_strApplicationIDAssetName="[in_strApplicationID]" in_strApplicationSecretAssetName="[in_strApplicationSecretName]" in_strOrchestratorFolderPath="[in_strOrchestratorFolderPath]" in_strSharepointNewFolderName="[Now.ToString(&quot;MMMM&quot;)]" in_strSharepointParentFolderPath="[in_strSharepointParentFolder+&quot;/&quot;+Now.ToString(&quot;yyyy&quot;)]" in_strSharepointURL="[in_strSharePtURL]" in_strTenantIDAssetName="[in_strTenantID]" out_boolFolderCreated="[boolFolderCreated]">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </l:Create_Folder>
              </Sequence>
            </If.Then>
            <If.Else>
              <Sequence sap:VirtualizedContainerService.HintSize="376,229" sap2010:WorkflowViewState.IdRef="Sequence_19">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <ui:LogMessage DisplayName="Log Monthly Folder Exists" sap:VirtualizedContainerService.HintSize="334,141" sap2010:WorkflowViewState.IdRef="LogMessage_10" Level="[UiPath.Core.Activities.LogLevel.Info]" Message="[&quot;Folder for current Month is present&quot;]">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </ui:LogMessage>
              </Sequence>
            </If.Else>
          </If>
          <l:Files_or_Folders_Exist sap2010:Annotation.AnnotationText="This will checks input folder exists or not." DisplayName="Folders Exist Output" sap:VirtualizedContainerService.HintSize="410,94" sap2010:WorkflowViewState.IdRef="Files_or_Folders_Exist_10" in_strApplicationIDAssetName="[in_strApplicationID]" in_strApplicationSecretAssetName="[in_strApplicationSecretName]" in_strOrchestratorFolderPath="[in_strOrchestratorFolderPath]" in_strSharepointFileFolderToSearch="[in_Config(&quot;SharepointOutputFolderName&quot;).ToString]" in_strSharepointSubfolder="[in_strSharepointParentFolder+&quot;/&quot;+Now.ToString(&quot;yyyy&quot;)+&quot;/&quot;+Now.ToString(&quot;MMMM&quot;)]" in_strSharepointURL="[in_strSharePtURL]" in_strTenantIDAssetName="[in_strTenantID]" out_boolResultFileFolderFound="[boolFolderExists]" out_intResultCount="[intResultcount]">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </l:Files_or_Folders_Exist>
          <If sap2010:Annotation.AnnotationText="This will checks Output folder and creates if not present." Condition="[not(boolFolderExists)]" DisplayName="Check OutputFolder Exists" sap:VirtualizedContainerService.HintSize="410,94" sap2010:WorkflowViewState.IdRef="If_4">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <If.Then>
              <Sequence sap:VirtualizedContainerService.HintSize="300,140" sap2010:WorkflowViewState.IdRef="Sequence_12">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <l:Create_Folder sap2010:Annotation.AnnotationText="This will creates monthly folder" DisplayName="Create Folder Output" sap:VirtualizedContainerService.HintSize="258,52" sap2010:WorkflowViewState.IdRef="Create_Folder_14" in_strApplicationIDAssetName="[in_strApplicationID]" in_strApplicationSecretAssetName="[in_strApplicationSecretName]" in_strOrchestratorFolderPath="[in_strOrchestratorFolderPath]" in_strSharepointNewFolderName="[in_Config(&quot;SharepointOutputFolderName&quot;).ToString]" in_strSharepointParentFolderPath="[in_strSharepointParentFolder+&quot;/&quot;+Now.ToString(&quot;yyyy&quot;)+&quot;/&quot;+Now.ToString(&quot;MMMM&quot;)]" in_strSharepointURL="[in_strSharePtURL]" in_strTenantIDAssetName="[in_strTenantID]" out_boolFolderCreated="[boolFolderCreated]">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsAnnotationDocked">False</x:Boolean>
                      <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </l:Create_Folder>
              </Sequence>
            </If.Then>
            <If.Else>
              <Sequence sap:VirtualizedContainerService.HintSize="376,229" sap2010:WorkflowViewState.IdRef="Sequence_13">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <ui:LogMessage DisplayName="Log OutputFolder Exists" sap:VirtualizedContainerService.HintSize="334,141" sap2010:WorkflowViewState.IdRef="LogMessage_7" Level="[UiPath.Core.Activities.LogLevel.Info]" Message="[&quot;Output folder is present&quot;]">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </ui:LogMessage>
              </Sequence>
            </If.Else>
          </If>
          <l:Files_or_Folders_Exist sap2010:Annotation.AnnotationText="This will check todays folder exists or not." DisplayName="Folders Exists Day" sap:VirtualizedContainerService.HintSize="410,94" sap2010:WorkflowViewState.IdRef="Files_or_Folders_Exist_11" in_strApplicationIDAssetName="[in_strApplicationID]" in_strApplicationSecretAssetName="[in_strApplicationSecretName]" in_strOrchestratorFolderPath="[in_strOrchestratorFolderPath]" in_strSharepointFileFolderToSearch="[now.ToString(&quot;MM-dd-yyyy&quot;)]" in_strSharepointSubfolder="[in_strSharepointParentFolder+&quot;/&quot;+Now.ToString(&quot;yyyy&quot;)+&quot;/&quot;+Now.ToString(&quot;MMMM&quot;)+&quot;/&quot;+in_Config(&quot;SharepointOutputFolderName&quot;).ToString]" in_strSharepointURL="[in_strSharePtURL]" in_strTenantIDAssetName="[in_strTenantID]" out_boolResultFileFolderFound="[boolFolderExists]" out_intResultCount="[intResultcount]">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </l:Files_or_Folders_Exist>
          <If sap2010:Annotation.AnnotationText="This will check and creates today folder if not present." Condition="[not(boolFolderExists)]" DisplayName="Check Day Folder Exists" sap:VirtualizedContainerService.HintSize="334,353" sap2010:WorkflowViewState.IdRef="If_3">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <If.Then>
              <Sequence sap:VirtualizedContainerService.HintSize="300,140" sap2010:WorkflowViewState.IdRef="Sequence_10">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <l:Create_Folder sap2010:Annotation.AnnotationText="This will creates todays folder." DisplayName="Create Folder Day" sap:VirtualizedContainerService.HintSize="258,52" sap2010:WorkflowViewState.IdRef="Create_Folder_15" in_strApplicationIDAssetName="[in_strApplicationID]" in_strApplicationSecretAssetName="[in_strApplicationSecretName]" in_strOrchestratorFolderPath="[in_strOrchestratorFolderPath]" in_strSharepointNewFolderName="[now.ToString(&quot;MM-dd-yyyy&quot;)]" in_strSharepointParentFolderPath="[in_strSharepointParentFolder+&quot;/&quot;+Now.ToString(&quot;yyyy&quot;)+&quot;/&quot;+Now.ToString(&quot;MMMM&quot;)+&quot;/&quot;+in_Config(&quot;SharepointOutputFolderName&quot;).ToString]" in_strSharepointURL="[in_strSharePtURL]" in_strTenantIDAssetName="[in_strTenantID]" out_boolFolderCreated="[boolFolderCreated]">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsAnnotationDocked">False</x:Boolean>
                      <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </l:Create_Folder>
              </Sequence>
            </If.Then>
            <If.Else>
              <Sequence sap:VirtualizedContainerService.HintSize="376,229" sap2010:WorkflowViewState.IdRef="Sequence_11">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <ui:LogMessage DisplayName="Log Yearly Folder Exists" sap:VirtualizedContainerService.HintSize="334,141" sap2010:WorkflowViewState.IdRef="LogMessage_6" Level="[UiPath.Core.Activities.LogLevel.Info]" Message="[&quot;Folder for Today is present&quot;]">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </ui:LogMessage>
              </Sequence>
            </If.Else>
          </If>
          <ui:LogMessage DisplayName="Log Message Sharepoint End" sap:VirtualizedContainerService.HintSize="410,52" sap2010:WorkflowViewState.IdRef="LogMessage_1" Level="Info" Message="[&quot; Completed the sharepoint file upload part.&quot;]">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </ui:LogMessage>
        </Sequence>
      </TryCatch.Try>
      <TryCatch.Catches>
        <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="456,386" sap2010:WorkflowViewState.IdRef="Catch`1_1">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ActivityAction x:TypeArguments="s:Exception">
            <ActivityAction.Argument>
              <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
            </ActivityAction.Argument>
            <Sequence DisplayName="Create Folder System Exception" sap:VirtualizedContainerService.HintSize="450,317" sap2010:WorkflowViewState.IdRef="Sequence_14">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <ui:LogMessage DisplayName="Log Message: SE Create Folder" sap:VirtualizedContainerService.HintSize="388,141" sap2010:WorkflowViewState.IdRef="LogMessage_8" Level="[UiPath.Core.Activities.LogLevel.Error]" Message="[in_Config(&quot;CreateFoldersSPSE&quot;).ToString+&quot;Exception Source: &quot;+exception.Source+Environment.NewLine+&quot;Exception Message: &quot;+exception.Message]">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
              </ui:LogMessage>
              <Rethrow DisplayName="Rethrow SE" sap:VirtualizedContainerService.HintSize="388,25" sap2010:WorkflowViewState.IdRef="Rethrow_1" />
            </Sequence>
          </ActivityAction>
        </Catch>
      </TryCatch.Catches>
    </TryCatch>
  </Sequence>
</Activity>